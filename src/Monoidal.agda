module Monoidal where

open import Level
open import Function using (flip)
open import Data.Product
open import IO
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning

open import Category
open import Functor
open import Product
open import NaturalTransformation

private
  variable n m n' m' n'' m'' : Level



record Monoidal (cat : Cat n m) : (Set (n ‚äî m)) where
  constructor MkMonoidal
  open Cat
  open _Functor_

  field
    _‚äó_ : (cat X cat) Functor cat
    ùüô : obj cat

  -- map on objects
  _‚äó‚Çí_ : obj (cat X cat) ‚Üí obj cat
  _‚äó‚Çí_ = mapObj _‚äó_

  ---- map on morphisms
  --_‚äó‚Çò_ : obj (cat X cat) ‚Üí obj cat
  --_‚äó‚Çò_ = mapMor _‚äó_

  multiplyTwiceFromRight : (cat X (cat X cat)) Functor cat
  multiplyTwiceFromRight = MkFunctor
    (Œª x ‚Üí {!!})
    -- (Œª x ‚Üí let gg = (proj‚ÇÅ x) ‚äó‚Çí ? -- (proj‚ÇÅ (proj‚ÇÇ x) ‚äó‚Çí ?)
    --        in {!!} ) -- )(proj‚ÇÅ x) ‚äó‚Çí ?)
    {!!}
    {!!}
    {!!}

  multiplyTwiceAssociator : (cat X (cat X cat)) Functor cat
  multiplyTwiceAssociator = {!!}

  field
    associator : Isomorphism (functorCategory (cat X (cat X cat)) cat)
      multiplyTwiceFromRight multiplyTwiceAssociator


ff : {a b : Set} ‚Üí a √ó b ‚Üí a √ó a
ff = Œª x ‚Üí {!!}
