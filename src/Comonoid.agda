module Comonoid where

open import Level
open import Function using (flip)
open import Data.Product
open import IO
open import Relation.Binary.PropositionalEquality hiding ([_])
open ‚â°-Reasoning

open import Category
open import Functor
open import Product
open import NaturalTransformation
open import Monoidal
open import SymmetricMonoidal

private
  variable
    n m n' m' n'' m'' : Level

record Cartesian
  {cat : Cat n m}
  {mc : Monoidal cat}
  (smc : SymmetricMonoidal mc)
  : (Set (n ‚äî m)) where
  constructor MkComonoid
  module C = Cat cat
  open C
  module M = Monoidal.Monoidal mc
  open M
  module S = SymmetricMonoidal.SymmetricMonoidal smc
  open S

  field
    -- TODO these should actually be monoidal natural transformations?
    Œ¥ : {c : obj} ‚Üí cat [ c , c ‚äó‚Çí c ] -- multiplication
    Œµ : {c : obj} ‚Üí cat [ c , ùüô ]       -- counit

    copySwap   : {c : obj} ‚Üí (œÉ‚Çí ‚àò Œ¥) ‚â° Œ¥ {c = c}
    copyDelete : {c : obj} ‚Üí Œª‚Çí {a = c} ‚àò (Œµ ‚äó‚Çò id) ‚àò Œ¥ ‚â° id
    copyAssoc  : {c : obj} ‚Üí Œ±‚Çí ‚àò (Œ¥ ‚äó‚Çò id) ‚àò Œ¥ {c = c}
                                 ‚â° (id ‚äó‚Çò Œ¥) ‚àò Œ¥ {c = c}

    deleteApply : {a b : obj} {f : cat [ a , b ] } ‚Üí Œµ ‚â° cat [ Œµ ‚àò f ]
    copyApply : {a b : obj} {f : cat [ a , b ] } ‚Üí cat [ Œ¥  ‚àò f ] ‚â° cat [ (f ‚äó‚Çò f) ‚àò Œ¥ ]

  œÄ‚ÇÅ : {a b : obj} ‚Üí cat [ a ‚äó‚Çí b , a ]
  œÄ‚ÇÅ = cat [ œÅ‚Çí ‚àò (id ‚äó‚Çò Œµ) ]

  œÄ‚ÇÇ : {a b : obj} ‚Üí cat [ a ‚äó‚Çí b , b ]
  œÄ‚ÇÇ = cat [ Œª‚Çí ‚àò (Œµ ‚äó‚Çò id) ]

  -- TODO prove universal property of cartesian product?


{-
record ComonoidHom {cat : Cat n m} {mc : Monoidal cat} {smc : SymmetricMonoidal mc}
  {a b : obj cat}
  (c‚ÇÅ : Comonoid smc a)
  (c‚ÇÇ : Comonoid smc b)
  : Set m where
  constructor MkComonoidHom
  module C‚ÇÅ = Comonoid c‚ÇÅ
  open C‚ÇÅ renaming (Œµ to Œµ‚ÇÅ; Œ¥ to Œ¥‚ÇÅ)
  module C‚ÇÇ = Comonoid c‚ÇÇ
  open C‚ÇÇ renaming (Œµ to Œµ‚ÇÇ; Œ¥ to Œ¥‚ÇÇ)
  module mc = Monoidal.Monoidal mc
  open mc

  -- map between objects which preserves comonoid structure
  field
    f : cat [ a , b ]
    deleteApply : Œµ‚ÇÅ ‚â° cat [ Œµ‚ÇÇ ‚àò f ]
    copyApply : cat [ Œ¥‚ÇÇ ‚àò f ] ‚â° cat [ (f ‚äó‚Çò f) ‚àò Œ¥‚ÇÅ ]


-- category of commutative comonoids
-- also a cartesian monoidal category?
comm : {cat : Cat n m} {mc : Monoidal cat} {smc : SymmetricMonoidal mc}
  ‚Üí Cat n m
comm {cat = cat} {mc = mc} {smc = smc} = MkCat
  (let tt = Comonoid smc
       t = obj cat
       -- ttt = map tt t
   in {!!})
  {!!}
  {!!}
  {!!}
  {!!}
  {!!}

  {!!}


-}
