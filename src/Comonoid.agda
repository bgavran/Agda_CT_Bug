module Comonoid where

open import Level
open import Function using (flip)
open import Data.Product
open import IO
open import Relation.Binary.PropositionalEquality hiding ([_])
open ‚â°-Reasoning

open import Category
open import Functor
open import Product
open import NaturalTransformation
open import Monoidal
open import SymmetricMonoidal

private
  variable
    n m n' m' n'' m'' : Level

record Comonoid {cat : Cat n m} {mc : Monoidal cat} (smc : SymmetricMonoidal mc) : (Set (n ‚äî m)) where
  constructor MkComonoid
  open _Functor_
  module C = Cat cat
  open C
  module M = Monoidal.Monoidal mc
  open M
  module S = SymmetricMonoidal.SymmetricMonoidal smc
  open S

  field
    Œ¥ : {c : obj} ‚Üí cat [ c , c ‚äó‚Çí c ] -- multiplication
    Œµ : {c : obj} ‚Üí cat [ c , ùüô ]       -- counit

    copySwap   : {c : obj} ‚Üí (_œÉ‚Çí_ ‚àò Œ¥) ‚â° Œ¥ {c = c}
    copyDelete : {c : obj} ‚Üí leftUnitor‚Çí {a = c} ‚àò (Œµ ‚äó‚Çò id) ‚àò Œ¥ ‚â° id
    copyAssoc  : {c : obj} ‚Üí Œ±‚Çí ‚àò (Œ¥ ‚äó‚Çò id) ‚àò Œ¥ {c = c}
                                ‚â° (id ‚äó‚Çò Œ¥) ‚àò Œ¥ {c = c}
