module Product where

open import Data.Product
open import Level
open import Function using (flip) renaming (_‚àò_ to _‚àô_)
open import IO
open import Relation.Binary.PropositionalEquality
open ‚â°-Reasoning

open import Category
open import Functor

open Cat
open _Functor_

private
  variable
    n m n' m' : Level
    c‚ÇÅ c‚ÇÇ d‚ÇÅ d‚ÇÇ : Cat n m

_X_ : (Cat n m) ‚Üí (Cat n' m') ‚Üí (Cat (n ‚äî n') (m ‚äî m'))
obj (c‚ÇÅ X c‚ÇÇ) = (obj c‚ÇÅ √ó obj c‚ÇÇ)
_hom_ (c‚ÇÅ X c‚ÇÇ) (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) = (a‚ÇÅ hom‚ÇÅ b‚ÇÅ) √ó (a‚ÇÇ hom‚ÇÇ b‚ÇÇ)
  where _hom‚ÇÅ_ = _hom_ c‚ÇÅ
        _hom‚ÇÇ_ = _hom_ c‚ÇÇ
id (c‚ÇÅ X c‚ÇÇ) = id c‚ÇÅ , id c‚ÇÇ
_‚àò_ (c‚ÇÅ X c‚ÇÇ) = zip (_‚àò_ c‚ÇÅ) (_‚àò_ c‚ÇÇ)
left-id (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (left-id c‚ÇÅ) (left-id c‚ÇÇ)
right-id (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (right-id c‚ÇÅ) (right-id c‚ÇÇ)
assoc (c‚ÇÅ X c‚ÇÇ) = cong‚ÇÇ _,_ (assoc c‚ÇÅ) (assoc c‚ÇÇ)

productAssociator : {cat1 : Cat n m} ‚Üí {cat2 : Cat n m} ‚Üí {cat3 : Cat n m}
  ‚Üí ((cat1 X cat2) X cat3) Functor (cat1 X (cat2 X cat3))
productAssociator = MkFunctor
  (< proj‚ÇÅ ‚àô proj‚ÇÅ , < proj‚ÇÇ ‚àô proj‚ÇÅ , proj‚ÇÇ > > )
  (< proj‚ÇÅ ‚àô proj‚ÇÅ , < proj‚ÇÇ ‚àô proj‚ÇÅ , proj‚ÇÇ > > )
  refl
  Œª _ _ ‚Üí refl


_ùïè_ : (c‚ÇÅ Functor d‚ÇÅ) ‚Üí (c‚ÇÇ Functor d‚ÇÇ) ‚Üí (c‚ÇÅ X c‚ÇÇ) Functor (d‚ÇÅ X d‚ÇÇ)
mapObj (F ùïè G) (a , a') = mapObj F a , mapObj G a'
mapMor (F ùïè G) (f , g) = mapMor F f , mapMor G g
idLaw (F ùïè G) = cong‚ÇÇ _,_ (idLaw F) (idLaw G)
compLaw (F ùïè G) (f‚ÇÅ , f‚ÇÇ) (g‚ÇÅ , g‚ÇÇ) = cong‚ÇÇ _,_ (compLaw F f‚ÇÅ g‚ÇÅ) (compLaw G f‚ÇÇ g‚ÇÇ)
